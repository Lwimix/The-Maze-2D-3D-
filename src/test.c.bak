#include <SDL2/SDL.h>
#include <stdbool.h>
#include <SDL2/SDL_image.h>

int main(int argc, char** argv) {
  (void)argc, (void)argv;
  bool quit = false;
  SDL_Event event;

  if (SDL_Init(SDL_INIT_VIDEO) != 0) {
    printf("SDL_Init Error: %s\n", SDL_GetError());
    return 1;
  }

  SDL_Window* window = SDL_CreateWindow("SDL2 Displaying Image",
                                         SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
                                         640, 480, 0);
  if (window == NULL) {
    printf("SDL_CreateWindow Error: %s\n", SDL_GetError());
    SDL_Quit();
    return 1;
  }

  SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);
  if (renderer == NULL) {
    printf("SDL_CreateRenderer Error: %s\n", SDL_GetError());
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 1;
  }

  SDL_DestroyTexture(texture);
  SDL_DestroyRenderer(renderer);
  SDL_DestroyWindow(window);

  SDL_Quit();

  return 0;
}
/*void castRays() {
    for (int x = 0; x < screenWidth; x++) {
        // Calculate ray direction
        double rayAngle = playerAngle - FOV/2 + (x / (double)screenWidth) * FOV;

        // Ray tracing logic to detect walls
        double distanceToWall = 0;
        bool hitWall = false;

        while (!hitWall && distanceToWall < maxDepth) {
            // Move along the ray and check for collisions with walls
            // Update distanceToWall and hitWall accordingly
        }

        // Calculate wall height based on distance
        int wallHeight = (int)(screenHeight / distanceToWall);

        // Render the wall slice
        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderDrawLine(renderer, x, (screenHeight - wallHeight) / 2, x, (screenHeight + wallHeight) / 2);
    }
}
*/
